service {
  // base configuration common for all microservices that individual microservice can overwrite as needed
  baseConfig {
    name = "service-chassis"
    name = ${?SERVICE_NAME}

    httpConfig {
      host = "0.0.0.0"
      host = ${?HOST}
      port = 8080
      port = ${?PORT}
    }

    languageConfig {
      header = "Accept-Language",
      parameter = "lang"
    }

    corsConfig {
      allowedOrigins: [
        "http://localhost:8080"
      ]
    }

    auth {
      expiration {
        expiry = "7 days"
        refreshTokenExpiry = "30 days"
        refreshTokenStrategy = "simple"
      }
      // using Asymmetric encryption
      // private key will be used to sign the JWT token and the public key can be used to verify the token returned to the service
      //
      // *************
      // * IMPORTANT *
      // *************
      // At the very least, microservice extending this chassis should overwrite these keys (preferrably using a vault or at a
      // minimum using environment variables)
      //
      // To generate a new public private key, Look at RSAKeyGenerator in the util package
      rsa {
        publicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAkQWuT24lxp6UEaHMWQrCEpKdgwrpa168IEqbz1OxTR0TIPYe2uHSyTABCa1o33hV/Cf3gnFXhAy6Pt7/rJ/CUVKec/KTd50/aTS4Cdxyx188rzn8zfh9179e3EI0pDZqebmB+Jdsv2EAKoXadUVyXuBiMd8qErHI6SaJ4puLk/8r4J2t46CEW+kDqngwttoxhbc+zIdsfCvYene5QN6JYaXC+6223A6yNXizGXsQ2/9QszkbG5EDN+dCMK/QiBPMTuZ8O8V7fgAff5mTc3jntC/b3QgKcqfDKkanjk37E/+sxh6oY/M8LX9RMntKsR+MqKnHEOWnO4ke4kMBdlmJyQIDAQAB"
        publicKey = ${?RSA_PUBLIC_KEY}
        privateKey = "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCRBa5PbiXGnpQRocxZCsISkp2DCulrXrwgSpvPU7FNHRMg9h7a4dLJMAEJrWjfeFX8J/eCcVeEDLo+3v+sn8JRUp5z8pN3nT9pNLgJ3HLHXzyvOfzN+H3Xv17cQjSkNmp5uYH4l2y/YQAqhdp1RXJe4GIx3yoSscjpJonim4uT/yvgna3joIRb6QOqeDC22jGFtz7Mh2x8K9h6d7lA3olhpcL7rbbcDrI1eLMZexDb/1CzORsbkQM350Iwr9CIE8xO5nw7xXt+AB9/mZNzeOe0L9vdCApyp8MqRqeOTfsT/6zGHqhj8zwtf1Eye0qxH4yoqccQ5ac7iR7iQwF2WYnJAgMBAAECggEAJ0FuabnbJ+SNGCi/8+phlj1xvaMahCHksqj/fCOffsw7/VQiDgXK1QLVhRUXqkYcoGEBMqITmn8HezVJ6CRmqTTAB4rGOD6sh4Hpv2GZADbbamM791UoW1pGB0E0lq7UK5b3g58ZpMRREzGgbNYbm2sJqY5LCTxusg3ojRqlsa2aaboC30kR1bJgng4gD6pS1Bu/XGczRkeLt2n/IdC5W3+uhPH2RY0zRSSeeIWggkGs56/xqndKZl25+Ll2HN1OJmbHOMQHtaIHJXcmQ986WrCLYZfwHRJ7gxm6jAlnNFoTCaJqPjbyAIP1nWZORd9JbHWqaxW0y7sZyYxq3yISMQKBgQDsQZD2uN6OATEL7iiunTmSRaACocNlWOiru/iHwxGuVlWWqIvuHQNXDyIrPqOCFKaS3tUQpE/F79MzXYC7P0s8DBn7tt4snYBSVF1F8KF7pLfBVjTh6QZAHn+GxRNGGFFusCnkZMa854yqgR92UqauAulkOTCLacglCIbg3x1XCwKBgQCdJER3ibZYCfYoyynXrU4oetC0oc+E86iByNy5mqnjPNMAVL3DGLH9UQ3r0GSPLzdGRC/0nKUz2U6GrfYDIDZ7T9Ss21M+HQZ1CKBl05LuUBOi5Pr2XK9qJQre5iYrLH7cbFiR4mkpGeCNnx6XLjGI4BCFdyK5yRjO1nh4ZLbW+wKBgG8DhCWayuD5SF2txCoAsQu9camq71DRDUudIPRSQh2kbcVEX7Q8p9QhxVGCtnwqTfdXg9C1FNMSlTBesF3MKQMHQLJZxF48iA6nm8iAgLDDvqC3bFP3FjvM2Omv8xWN2b3kQ1sRy5z6RMvdrrX/sliz/41bnib0Rtq3/gDudi/vAoGAWAxHNLd77S5/t/HGGyvm/DV8lYmIzlT8WOQkEPdBM6sUCz5wKU3ABVESPMxCXBw3m25/dE8FHd0n67yzeKLnBAcCAmzN4qK+yHqx7Pw0esVxizdECyB5xT7GLYjFYDGJT5aBthQnmjj+ojvDFzBx3uC1QSM02OZ9uP9g9wxvilsCgYEApH40GxBUWDhF7kLogCFBE/GbflxVZa49sS+5XVkvBE93b4m/S+OrLNQrp/0/RpT+VwRgYP8Gm3GYA6t4zxOrgej4Z9GcVq1LeaqhuVbWCZnQ/Nkrmz/hv9HwzlYTIN/w6qGLcVXTy4q4B85PUkkG7/BlXDewjVv2YOxHtpJAEzo="
        privateKey = ${?RSA_PRIVATE_KEY}
      }
    }

    awaitTermination = "30 seconds"
  }

  // configuration specific for the individual microservice
  config {
  }
}

akka {
  stdout-loglevel = INFO
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 30s

  actor {
    default-dispatcher {
      type = "allawala.chassis.core.dispatcher.MDCPropagatingDispatcherConfigurator"
    }
  }
}

blocking-fixed-pool-dispatcher {
  type = "allawala.chassis.core.dispatcher.MDCPropagatingDispatcherConfigurator"
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 102 # Typically db conn pool (100) + number of cores (1) + housekeeping (1)
  }
  throughput = 100
}

akka.logger-startup-timeout = 30s
